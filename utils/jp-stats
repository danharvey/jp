#!/usr/bin/env ruby1.9
# Requires:
# - Thrift

target = ARGV[0]
target ||= 'localhost:9090'
host, port = target.split(':')

##### Thrift setup #####

$LOAD_PATH.push File.dirname($0) + '/../gen-rb/'
require 'job_pool_instrumented'

include Jp

transport = Thrift::BufferedTransport.new(Thrift::Socket.new(host, port))
client = JobPoolInstrumented::Client.new(Thrift::BinaryProtocol.new(transport))
transport.open

##### Our code #####

# We're connected, get the stats
start_time = client.start_time
seconds    = (Time.new - Time.at(start_time)).to_i
pools      = client.pools

added      = Hash.new(0)
acquired   = Hash.new(0)
empty      = Hash.new(0)
purged     = Hash.new(0)

pools.each do |pool|
	added[pool]    = client.add_count pool
	acquired[pool] = client.acquire_count pool
	empty[pool]    = client.empty_count pool
	purged[pool]   = client.purge_count pool

	added[:total]    += added[pool]
	acquired[:total] += acquired[pool]
	empty[:total]    += empty[pool]
	purged[:total]   += purged[pool]
end
print <<EOF
#################
##### TOTAL #####
#################
running_since: #{start_time} (#{Time.at start_time})
running_for:   #{seconds} seconds
pools:         #{pools.size}
added:         #{added[:total]} (#{added[:total].to_f / seconds}/s)
acquired:      #{acquired[:total]} (#{acquired[:total].to_f / seconds}/s)
empty:         #{empty[:total]} (#{empty[:total].to_f / seconds}/s)
purged:        #{purged[:total]} (#{purged[:total].to_f / seconds}/s)
EOF

pools.each do |pool|
	print ("#" * (12 + pool.length)) + "\n"
	print "##### %s #####\n" % pool
	print ("#" * (12 + pool.length)) + "\n"
	print "added:    %d (%f/s)\n" % [added[pool], added[pool].to_f / seconds]
	print "acquired: %d (%f/s)\n" % [acquired[pool], acquired[pool].to_f / seconds]
	print "empty:    %d (%f/s)\n" % [empty[pool], empty[pool].to_f / seconds]
	print "purged:   %d (%f/s)\n" % [purged[pool], purged[pool].to_f / seconds]
end
